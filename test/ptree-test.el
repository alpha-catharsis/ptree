(require 'ptree)

;; Property tree tests

(ert-deftest ptree-test-create ()
  (should (equal (list nil nil nil) '(nil nil nil))))

(ert-deftest ptree-test-root-p ()
  (should (eq (ptree-root-p '(nil nil nil)) t))
  (should (eq (ptree-root-p '("test" nil nil)) nil))
  (should (eq (ptree-root-p '("test" nil ("test2" nil nil))) nil))
  (should (eq (ptree-root-p '("test" 42)) nil))
  (should (eq (ptree-root-p '("test" nil)) nil)))

(ert-deftest ptree-test-branch-p ()
  (should (eq (ptree-branch-p '(nil nil nil)) nil))
  (should (eq (ptree-branch-p '("test" nil nil)) t))
  (should (eq (ptree-branch-p '("test" nil ("test2" nil nil))) t))
  (should (eq (ptree-branch-p '("test" 42)) nil))
  (should (eq (ptree-branch-p '("test" nil)) nil)))

(ert-deftest ptree-test-leaf-p ()
  (should (eq (ptree-leaf-p '(nil nil nil)) nil))
  (should (eq (ptree-leaf-p '("test" nil nil)) nil))
  (should (eq (ptree-leaf-p '("test" nil ("test2" nil nil))) nil))
  (should (eq (ptree-leaf-p '("test" 42)) t))
  (should (eq (ptree-leaf-p '("test" nil)) t)))

(ert-deftest ptree-test-tag ()
  (should (eq (ptree-tag '(nil nil nil)) nil))
  (should (equal (ptree-tag '("test" nil nil)) "test"))
  (should (equal (ptree-tag '("test" nil ("test2" nil nil))) "test"))
  (should (equal (ptree-tag '("test" 42)) "test")))

(ert-deftest ptree-test-value ()
  (should (eq (ptree-value '(nil nil nil)) 'not-found))
  (should (eq (ptree-value '("test" nil nil)) 'not-found))
  (should (eq (ptree-value '("test" nil ("test2" nil nil))) 'not-found))
  (should (eq (ptree-value '("test" 42)) 42))
  (should (eq (ptree-value '("test" nil)) nil)))

(ert-deftest ptree-test-child-num ()
  (should (eq (ptree-child-num '(nil nil nil)) 0))
  (should (eq (ptree-child-num '("test" nil nil)) 0))
  (should (eq (ptree-child-num '("test" nil ("test2" nil nil))) 1))
  (should (eq (ptree-child-num '("test" 42)) 0))
  (should (eq (ptree-child-num '(nil nil (0 nil nil) (1 nil nil)
                                     (2 nil nil))) 3))
  (should (eq (ptree-child-num '(nil nil (0 42) (1 9) (2 3))) 3))
  (should (eq (ptree-child-num '("test" nil (0 nil nil) (1 nil nil)
                                 (2 nil nil) (3 nil (31 nil nil))
                                 (4 nil (41 nil nil))
                                 (5 nil (51 nil nil)))) 6)))

(ert-deftest ptree-test-child-at-index ()
  (should (equal (ptree-child-at-index '(nil nil nil) 0) nil))
  (should (equal (ptree-child-at-index '(nil nil nil) 1) nil))
  (should (equal (ptree-child-at-index '("test" nil nil) 0) nil))
  (should (equal (ptree-child-at-index '("test" nil nil) 1) nil))
  (should (equal (ptree-child-at-index '("test" 42) 0) nil))
  (should (equal (ptree-child-at-index '("test" 42) 1) nil))
  (let ((pt '(nil nil (0 nil nil) (1 "a") (3 nil nil) (4 42))))
    (should (equal (ptree-child-at-index pt 0) '(0 nil nil)))
    (should (equal (ptree-child-at-index pt 1) '(1 "a")))
    (should (equal (ptree-child-at-index pt 2) '(3 nil nil)))
    (should (equal (ptree-child-at-index pt 3) '(4 42)))
    (should (equal (ptree-child-at-index pt 4) nil)))
  (let ((pt '("test" nil (0 nil nil) (1 "a") (3 nil nil) (4 42))))
    (should (equal (ptree-child-at-index pt 0) '(0 nil nil)))
    (should (equal (ptree-child-at-index pt 1) '(1 "a")))
    (should (equal (ptree-child-at-index pt 2) '(3 nil nil)))
    (should (equal (ptree-child-at-index pt 3) '(4 42)))
    (should (equal (ptree-child-at-index pt 4) nil))))

(ert-deftest ptree-test-node-at-path ()
  (let ((pt '(nil nil (0 nil (zero nil ("zero" nil nil)))
                  (zero nil ("zero" nil (0 nil nil)))
                  ("zero" nil (0 nil (zero nil nil))))))
    (should (equal (ptree-node-at-path pt 1) nil))
    (should (equal (ptree-node-at-path pt '(0 one)) nil))
    (should (equal (ptree-node-at-path pt '(0 zero "one")) nil))
    (should (equal (ptree-node-at-path pt '(0 zero "zero" "one")) nil))
    (should (eq (ptree-node-at-path pt nil) pt))
    (should (equal (ptree-node-at-path pt 0)
                   '(0 nil (zero nil ("zero" nil nil)))))
    (should (equal (ptree-node-at-path pt '(0 zero))
                   '(zero nil ("zero" nil nil))))
    (should (equal (ptree-node-at-path pt 'zero)
                   '(zero nil ("zero" nil (0 nil nil)))))
    (should (equal (ptree-node-at-path pt '(zero "zero"))
                   '("zero" nil (0 nil nil))))
    (should (equal (ptree-node-at-path pt "zero")
                   '("zero" nil (0 nil (zero nil nil)))))
    (should (equal (ptree-node-at-path pt '("zero" 0))
                   '(0 nil (zero nil nil))))))

(ert-deftest ptree-test-value-at-path ()
  (let ((pt '(0 42)))
    (should (eq (ptree-value-at-path pt nil) 42)))
  (let ((pt '(nil nil (0 42) (zero nil ("zero" 9))
                  ("one" nil)
                  ("zero" nil (0 nil (zero 3))))))
    (should (eq (ptree-value-at-path pt 1) 'not-found))
    (should (eq (ptree-value-at-path pt '(zero 0)) 'not-found))
    (should (eq (ptree-value-at-path pt '("zero" 0 one)) 'not-found))
    (should (eq (ptree-value-at-path pt '("zero" 0 zero one)) 'not-found))
    (should (eq (ptree-value-at-path pt 0) 42))
    (should (eq (ptree-value-at-path pt '(zero "zero")) 9))
    (should (eq (ptree-value-at-path pt '("zero" 0 zero)) 3))
    (should (eq (ptree-value-at-path pt "one") nil))))

(ert-deftest ptree-test-set-value-at-path ()
  (let ((pt (list nil nil nil)))
    (should (eq (ptree-set-value-at-path pt nil 42) nil))
    (should (equal pt '(nil nil nil))))
  (let ((pt (list "test" nil (list 'one 9) (list 'zero 3))))
    (should (eq (ptree-set-value-at-path pt nil 42) t))
    (should (equal pt '("test" 42))))
  (let ((pt (list "test" 42)))
    (should (eq (ptree-set-value-at-path pt nil 9) t))
    (should (equal pt '("test" 9)))
    (should (eq (ptree-set-value-at-path pt 0 "a") t))
    (should (equal pt '("test" nil (0 "a")))))
  (let ((pt (list "test" nil
                  (list 'one nil (list 'zero nil nil))
                  (list 'zero 3))))
    (should (eq (ptree-set-value-at-path pt 'zero 42) t))
    (should (equal pt '("test" nil (one nil (zero nil nil)) (zero 42))))
    (should (eq (ptree-set-value-at-path pt '(one zero) 9) t))
    (should (equal pt '("test" nil (one nil (zero 9)) (zero 42))))
    (should (eq (ptree-set-value-at-path pt 'one 3) t))
    (should (equal pt '("test" nil (one 3) (zero 42)))))
  (let ((pt (list nil nil nil)))
    (should (eq (ptree-set-value-at-path pt '(0 1 2) 42) t))
    (should (equal pt '(nil nil (0 nil (1 nil (2 42))))))))

(ert-deftest ptree-test-set-branches-at-path ()
  (let ((pt (list nil nil nil)))
    (should (eq (ptree-set-branches-at-path pt nil) nil))
    (should (equal pt '(nil nil nil)))
    (should (equal (ptree-set-branches-at-path pt nil "zero" 0 'zero)
                   '(zero nil nil)))
    (should (equal pt '(nil nil (0 nil nil) (zero nil nil) ("zero" nil nil))))
    (should (equal (ptree-set-branches-at-path pt nil "zero" 0 'zero)
                   '(zero nil nil)))
    (should (equal pt '(nil nil (0 nil nil) (zero nil nil) ("zero" nil nil)))))
  (let ((pt (list nil nil nil)))
    (should (equal (ptree-set-branches-at-path pt nil 0 0 0 0 0 0 0 0)
                   '(0 nil nil)))
    (should (equal pt '(nil nil (0 nil nil))))
    (should (equal (ptree-set-branches-at-path pt 0 1 2 3)
                   '(3 nil nil)))
    (should (equal pt '(nil nil (0 nil (1 nil nil) (2 nil nil) (3 nil nil)))))
    (should (equal (ptree-set-branches-at-path pt '(0 2) "a" "b")
                   '("b" nil nil)))
    (should (equal pt '(nil nil (0 nil (1 nil nil) (2 nil
                                                      ("a" nil nil)
                                                      ("b" nil nil))
                                   (3 nil nil)))))
    (should (equal (ptree-set-branches-at-path pt 0 2)
                   '(2 nil ("a" nil nil) ("b" nil nil))))
    (should (equal pt '(nil nil (0 nil (1 nil nil) (2 nil
                                                      ("a" nil nil)
                                                      ("b" nil nil))
                                   (3 nil nil))))))
  (let ((pt (list nil nil (list 'one nil (list 0 42)))))
    (should (equal (ptree-set-branches-at-path pt '(one 0 "t") 'zero 'two)
                   '(two nil nil)))
    (should (equal pt '(nil nil (one nil (0 nil ("t" nil (two nil nil)
                                                 (zero nil nil)))))))))

(ert-deftest ptree-test-set-leaves-at-path ()
  (let ((pt (list nil nil (list 0 nil nil) (list "test" 42))))
    (should (eq (ptree-set-leaves-at-path pt nil) nil))
    (should (equal pt '(nil nil (0 nil nil) ("test" 42))))
    (should (equal (ptree-set-leaves-at-path pt nil '(0 0) '(1 1) '(2 2)
                                             '("test" "xyz") '(one two))
                   '(one two)))
    (should (equal pt '(nil nil (0 0) (1 1) (2 2) (one two) ("test" "xyz")))))
  (let ((pt (list nil nil (list 0 nil nil) (list 1 42)
                  (list 2 nil (list 'one 9)))))
    (should (equal (ptree-set-leaves-at-path pt 0 '(5 "test"))
                   '(5 "test")))
    (should (equal pt '(nil nil (0 nil (5 "test")) (1 42) (2 nil (one 9)))))
    (should (equal (ptree-set-leaves-at-path pt 1 '(6 one))
                   '(6 one)))
    (should (equal pt '(nil nil (0 nil (5 "test")) (1 nil (6 one))
                            (2 nil (one 9)))))
    (should (equal (ptree-set-leaves-at-path pt '(1 2) '(3 "a"))
                   '(3 "a")))
    (should (equal pt '(nil nil (0 nil (5 "test"))
                            (1 nil (2 nil (3 "a")) (6 one))
                            (2 nil (one 9)))))
    (should (equal (ptree-set-leaves-at-path pt '(2 one 3) '(4 "b") '(5 "c")
                                             '(6 "d"))
                   '(6 "d")))
    (should (equal pt '(nil nil (0 nil (5 "test"))
                            (1 nil (2 nil (3 "a")) (6 one))
                            (2 nil (one nil (3 nil (4 "b")
                                               (5 "c")
                                               (6 "d"))))))))
  (let ((pt (list nil nil (list 'a0 nil (list 'b0 0) (list 'b1 1)))))
    (should (equal (ptree-set-leaves-at-path pt '(a0 0 c0) '(d0 0) '(d1 1))
                   '(d1 1)))
    (should (equal pt '(nil nil (a0 nil (0 nil (c0 nil (d0 0) (d1 1)))
                                    (b0 0) (b1 1)))))
    ))


(ert-deftest ptree-test-delete-nodes-at-path ()
  (let ((pt (list nil nil (list 0 42)
                  (list 'zero nil (list "zero" 9))
                  (list "one" nil)
                  (list "zero" nil (list 0 nil (list 'zero 3))))))
    (should (equal (ptree-delete-nodes-at-path pt nil 'one) '(one)))
    (should (equal (ptree-delete-nodes-at-path pt nil 1) '(1)))
    (should (equal (ptree-delete-nodes-at-path pt nil "two") '("two")))
    (should (eq (ptree-delete-nodes-at-path pt nil) nil))
    (should (equal pt '(nil nil (0 42) (zero nil ("zero" 9))
                            ("one" nil)
                            ("zero" nil (0 nil (zero 3))))))
    (should (eq (ptree-delete-nodes-at-path pt nil "zero") nil))
    (should (equal pt '(nil nil (0 42) (zero nil ("zero" 9))
                            ("one" nil))))
    (should (eq (ptree-delete-nodes-at-path pt nil "one") nil))
    (should (equal pt '(nil nil (0 42) (zero nil ("zero" 9)))))
    (should (eq (ptree-delete-nodes-at-path pt nil 0 'zero) nil))
    (should (equal pt '(nil nil nil))))
  (let ((pt (list nil nil (list 0 42)
                  (list 'zero nil (list "zero" 9))
                  (list "one" nil)
                  (list "zero" nil (list 0 nil (list 'zero 3))))))
    (should (equal (ptree-delete-nodes-at-path pt '("zero" 0) 'zero 'one)
                '(one)))
    (should (equal pt '(nil nil (0 42) (zero nil ("zero" 9)) ("one" nil)
                            ("zero" nil (0 nil nil)))))
    (should (eq (ptree-delete-nodes-at-path pt 'zero "zero") nil))
    (should (equal pt '(nil nil (0 42) (zero nil nil) ("one" nil)
                            ("zero" nil (0 nil nil)))))
    (should (eq (ptree-delete-nodes-at-path pt nil 0 'zero "one" "zero") nil))
    (should (equal pt '(nil nil nil)))))

;; Property tree iterator tests

(ert-deftest ptree-test-iter ()
  (let* ((pt '("test" nil (zero 42) (one 9) (two 3)))
         (iter (ptree-iter pt)))
    (should (eq (car iter) pt))
    (should (equal (cdr iter) '(nil)))))

(ert-deftest ptree-test-iter-node ()
  (let* ((pt '("test" nil (zero 42)))
         (iter (ptree-iter pt)))
    (should (eq (ptree-iter-node iter) pt))))

(ert-deftest ptree-test-iter-move-to-tag ()
  (let* ((child-3 '(zero 42))
         (child-2 (list "test" nil '("one" nil nil) child-3))
         (child-1 (list 0 nil child-2 '("ZZZ" 9)))
         (root (list nil nil '(-1 nil nil) child-1 '(1 "a")))
         (iter (ptree-iter root))
         (old-iter (copy-seq iter)))
    (should (eq (ptree-iter-move-to-tag iter 10) nil))
    (should (eq (car iter) root))
    (should (equal (cdr iter) '(nil)))
    (should (eq (ptree-iter-move-to-tag iter 0) t))
    (should (eq (car iter) child-1))
    (should (equal (cdr iter) (list old-iter '(1 "a"))))
    (should (eq (ptree-iter-move-to-tag iter "abc") nil))
    (should (eq (car iter) child-1))
    (should (equal (cdr iter) (list old-iter '(1 "a"))))
    (setq old-iter (copy-seq iter))
    (should (eq (ptree-iter-move-to-tag iter "test") t))
    (should (eq (car iter) child-2))
    (should (equal (cdr iter) (list old-iter '("ZZZ" 9))))
    (should (eq (ptree-iter-move-to-tag iter 'two) nil))
    (should (eq (car iter) child-2))
    (should (equal (cdr iter) (list old-iter '("ZZZ" 9))))
    (setq old-iter (copy-seq iter))
    (should (eq (ptree-iter-move-to-tag iter 'zero) t))
    (should (eq (car iter) child-3))
    (should (equal (cdr iter) (list old-iter)))
    (should (eq (ptree-iter-move-to-tag iter 0) nil))
    (should (eq (car iter) child-3))
    (should (equal (cdr iter) (list old-iter)))))

(ert-deftest ptree-test-iter-move-down ()
  (let* ((child-3 '(zero 42))
         (child-2 (list "test" nil child-3 '("one" nil nil)))
         (child-1 (list 0 nil child-2 '("ZZZ" 9)))
         (root (list nil nil child-1))
         (iter (ptree-iter root))
         (old-iter (copy-seq iter)))
    (should (eq (ptree-iter-move-down iter) t))
    (should (eq (car iter) child-1))
    (should (equal (cdr iter) (list old-iter)))
    (setq old-iter (copy-seq iter))
    (should (eq (ptree-iter-move-down iter) t))
    (should (eq (car iter) child-2))
    (should (equal (cdr iter) (list old-iter '("ZZZ" 9))))
    (setq old-iter (copy-seq iter))
    (should (eq (ptree-iter-move-down iter) t))
    (should (eq (car iter) child-3))
    (should (equal (cdr iter) (list old-iter '("one" nil nil))))
    (should (eq (ptree-iter-move-down iter) nil))
    (should (eq (car iter) child-3))
    (should (equal (cdr iter) (list old-iter '("one" nil nil))))))

(ert-deftest ptree-test-iter-move-up ()
  (let* ((child-31 '(zero 42))
         (child-32 '("one" nil nil))
         (child-21 (list "test" nil child-31 child-32))
         (child-22 '("ZZZ" 9))
         (child-1 (list 0 nil child-21 child-22))
         (root (list nil nil child-1))
         (iter (ptree-iter root)))
    (let ((iter-0 (copy-seq iter)))
      (ptree-iter-move-down iter)
      (let ((iter-1 (copy-seq iter)))
        (ptree-iter-move-down iter)
        (let ((iter-2 (copy-seq iter)))
          (ptree-iter-move-down iter)
          (should (eq (ptree-iter-move-up iter) t))
          (should (equal iter iter-2)))
        (should (eq (ptree-iter-move-up iter) t))
        (should (equal iter iter-1)))
      (should (eq (ptree-iter-move-up iter) t))
      (should (equal iter iter-0))
      (should (eq (ptree-iter-move-up iter) nil)))))

(ert-deftest ptree-test-iter-move-next ()
  (let* ((child-1 '(zero 42))
         (child-2 '(0 nil nil))
         (child-3 '("test" nil (one 9)))
         (parent (list "a" nil child-1 child-2 child-3))
         (iter (ptree-iter parent)))
    (ptree-iter-move-down iter)
    (should (eq (ptree-iter-move-next iter) t))
    (should (eq (car iter) child-2))
    (should (equal (cdr iter) (list (list parent nil) child-3)))
    (should (eq (ptree-iter-move-next iter) t))
    (should (eq (car iter) child-3))
    (should (equal (cdr iter) (list (list parent nil))))
    (should (eq (ptree-iter-move-next iter) nil))
    (should (eq (car iter) child-3))
    (should (equal (cdr iter) (list (list parent nil))))))

(ert-deftest ptree-test-iter-move-previous ()
  (let* ((child-1 '(0 nil nil))
         (child-2 '(zero 42))
         (child-3 '("test" nil (one 9)))
         (parent (list "a" nil child-1 child-2 child-3))
         (iter (ptree-iter parent)))
    (ptree-iter-move-down iter)
    (let ((iter-0 (copy-seq iter)))
      (ptree-iter-move-next iter)
      (let ((iter-1 (copy-seq iter)))
        (ptree-iter-move-next iter)
        (should (eq (ptree-iter-move-previous iter) t))
        (should (equal iter iter-1)))
      (should (eq (ptree-iter-move-previous iter) t))
      (should (equal iter iter-0)))
    (should (eq (ptree-iter-move-previous iter) nil))))

(ert-deftest ptree-test-iter-add-branch-and-move ()
  (let* ((child-1 (list "test" nil (list 'zero 42)))
         (root (list nil nil child-1))
         (iter (ptree-iter root)))
    (ptree-iter-add-branch-and-move iter 'zero)
    (should (equal (car iter) '(zero nil nil)))
    (should (equal (cdr iter) '(((nil nil (zero nil nil)
                                      ("test" nil (zero 42))) nil)
                                ("test" nil (zero 42)))))
    (setq iter (ptree-iter root))
    (ptree-iter-add-branch-and-move iter "test")
    (should (equal (car iter) '("test" nil (zero 42))))
    (should (equal (cdr iter) '(((nil nil (zero nil nil)
                                      ("test" nil (zero 42))) nil))))
    (setq iter (ptree-iter root))
    (ptree-iter-add-branch-and-move iter "zero")
    (should (equal (car iter) '("zero" nil nil)))
    (should (equal (cdr iter) '(((nil nil (zero nil nil)
                                      ("test" nil (zero 42))
                                      ("zero" nil nil)) nil))))))

(ert-deftest ptree-test-iter-delete-node ()
  (let* ((child-1 '(zero 42))
         (child-2 '(0 nil nil))
         (child-3 '("test" nil (one 9)))
         (parent (list "a" nil child-1 child-2 child-3))
         (iter (ptree-iter parent)))
    (ptree-iter-move-down iter)
    (should (eq (ptree-iter-delete-node iter) child-1))
    (should (eq (car iter) child-2))
    (should (equal (cdr iter)
                   '((("a" nil (0 nil nil) ("test" nil (one 9))) nil)
                     ("test" nil (one 9)))))
    (should (eq (ptree-iter-delete-node iter) child-2))
    (should (eq (car iter) child-3))
    (should (equal (cdr iter)
                   '((("a" nil ("test" nil (one 9))) nil))))
    (should (eq (ptree-iter-delete-node iter) child-3))
    (should (eq (car iter) parent))
    (should (equal (cdr iter) '(nil)))
    (should (eq (ptree-iter-delete-node iter) nil))))

(ert-deftest ptree-test-to-string ()
  (let ((pt '(nil nil
                  (current-users 12)
                  (desktop nil (background-color "black"))
                  (windows nil
                           ("xterm" nil
                            (pos-x 50)
                            (pos-y 100)
                            (width 500)
                            (height 200))
                           ("emacs" nil
                            (pos-x 600)
                            (pos-y 0)
                            (width 1000)
                            (height 800)))
                  (processes nil
                             (by-id nil
                                    (0 "startx")
                                    (1 "dbus-launch")
                                    (2 "X"))))))
    (should (string= (ptree-to-string pt) "current-users: 12
desktop
  background-color: black
windows
  \"xterm\"
    pos-x: 50
    pos-y: 100
    width: 500
    height: 200
  \"emacs\"
    pos-x: 600
    pos-y: 0
    width: 1000
    height: 800
processes
  by-id
    0: startx
    1: dbus-launch
    2: X\n"))
  ))

;; Test launcher

(defun ptree-run-tests ()
  (interactive)
  (ert-run-tests-interactively "ptree-test-"))
