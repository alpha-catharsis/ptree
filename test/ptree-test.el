(require 'ptree)

(ert-deftest ptree-test-create ()
  (should (equal (ptree-create) '(nil nil nil))))

(ert-deftest ptree-test-root-p ()
  (should (eq (ptree-root-p (ptree-create)) t))
  (should (eq (ptree-root-p '("test" nil nil)) nil))
  (should (eq (ptree-root-p '("test" nil ("test2" nil nil))) nil))
  (should (eq (ptree-root-p '("test" 42)) nil))
  (should (eq (ptree-root-p '("test" nil)) nil)))

(ert-deftest ptree-test-branch-p ()
  (should (eq (ptree-branch-p (ptree-create)) nil))
  (should (eq (ptree-branch-p '("test" nil nil)) t))
  (should (eq (ptree-branch-p '("test" nil ("test2" nil nil))) t))
  (should (eq (ptree-branch-p '("test" 42)) nil))
  (should (eq (ptree-branch-p '("test" nil)) nil)))

(ert-deftest ptree-test-leaf-p ()
  (should (eq (ptree-leaf-p (ptree-create)) nil))
  (should (eq (ptree-leaf-p '("test" nil nil)) nil))
  (should (eq (ptree-leaf-p '("test" nil ("test2" nil nil))) nil))
  (should (eq (ptree-leaf-p '("test" 42)) t))
  (should (eq (ptree-leaf-p '("test" nil)) t)))

(ert-deftest ptree-test-get-node-tag ()
  (should (eq (ptree-get-node-tag (ptree-create)) nil))
  (should (equal (ptree-get-node-tag '("test" nil nil)) "test"))
  (should (equal (ptree-get-node-tag '("test" nil ("test2" nil nil))) "test"))
  (should (equal (ptree-get-node-tag '("test" 42)) "test")))

(ert-deftest ptree-test-get-node-value ()
  (should (eq (ptree-get-node-value (ptree-create)) nil))
  (should (eq (ptree-get-node-value '("test" nil nil)) nil))
  (should (eq (ptree-get-node-value '("test" nil ("test2" nil nil))) nil))
  (should (eq (ptree-get-node-value '("test" 42)) 42)))

(ert-deftest ptree-test-set-node-value ()
  (should-error (ptree-set-node-value '(nil nil nil) 42))
  (should-error (ptree-set-node-value '("test" nil nil) 42))
  (should-error (ptree-set-node-value '("test" nil ("test2" nil nil) 42)))
  (should-error (ptree-set-node-value '("test" nil ("test2" 9) 42)))
  (let ((pt '("test" 42)))
    (ptree-set-node-value pt 9)
    (should (equal pt '("test" 9)))
    (ptree-set-node-value pt "a")
    (should (equal pt '("test" "a")))))

(ert-deftest ptree-test-get-child-nodes-num ()
  (should (eq (ptree-get-child-nodes-num '(ptree-create)) 0))
  (should (eq (ptree-get-child-nodes-num '("test" nil nil)) 0))
  (should (eq (ptree-get-child-nodes-num '("test" nil ("test2" nil nil))) 1))
  (should (eq (ptree-get-child-nodes-num '("test" 42)) 0))
  (should (eq (ptree-get-child-nodes-num '(nil nil (0 nil nil) (1 nil nil)
                                               (2 nil nil))) 3))
  (should (eq (ptree-get-child-nodes-num '(nil nil (0 42) (1 9)
                                               (2 3))) 3))
  (should (eq (ptree-get-child-nodes-num '("test" nil (0 nil nil) (1 nil nil)
                                           (2 nil nil) (3 nil (31 nil nil))
                                           (4 nil (41 nil nil))
                                           (5 nil (51 nil nil)))) 6)))

(ert-deftest ptree-test-add-node-at-path ()
  (let ((pt (ptree-create)))
    (ptree-add-node-at-path pt 0)
    (ptree-add-node-at-path pt '(zero))
    (ptree-add-node-at-path pt "one")
    (should (equal pt '(nil nil (0 nil nil) (zero nil nil) ("one" nil nil)))))
  (let ((pt (ptree-create)))
    (ptree-add-node-at-path pt '(0 1 2))
    (ptree-add-node-at-path pt '(0 zero "one"))
    (ptree-add-node-at-path pt '("one" zero 0))
    (should (equal pt '(nil nil (0 nil (1 nil (2 nil nil))
                                   (zero nil ("one" nil nil)))
                            ("one" nil (zero nil (0 nil nil))))))))

(ert-deftest ptree-test-add-child-nodes ()
  (let ((pt (ptree-create)))
    (ptree-add-child-nodes pt)
    (should (equal pt '(nil nil nil)))
    (ptree-add-child-nodes pt "zero" 0 'zero)
    (should (equal pt '(nil nil (0 nil nil) (zero nil nil) ("zero" nil nil))))
    (ptree-add-child-nodes pt 'zero 0 "zero")
    (should (equal pt '(nil nil (0 nil nil) (zero nil nil) ("zero" nil nil)))))
  (let ((pt (ptree-create)))
    (ptree-add-child-nodes pt 0 0 0 0 0 0 0 0)
    (should (equal pt '(nil nil (0 nil nil))))))

(ert-deftest ptree-test-add-value-at-path ()
  (let ((pt (ptree-create)))
    (ptree-add-value-at-path pt 42 "test")
    (should (equal pt '(nil nil ("test" 42))))
    (ptree-add-value-at-path pt 9 '(0 zero))
    (should (equal pt '(nil nil (0 nil (zero 9)) ("test" 42))))
    (ptree-add-value-at-path pt 3 '(0 zero))
    (should (equal pt '(nil nil (0 nil (zero 3)) ("test" 42))))
    (ptree-add-value-at-path pt nil "test2")
    (should (equal pt '(nil nil (0 nil (zero 3)) ("test" 42) ("test2" nil))))))

(ert-deftest ptree-test-get-node-at-path ()
  (let ((pt '(nil nil (0 nil (zero nil ("zero" nil nil)))
                  (zero nil ("zero" nil (0 nil nil)))
                  ("zero" nil (0 nil (zero nil nil))))))
    (should (equal (ptree-get-node-at-path pt 1) nil))
    (should (equal (ptree-get-node-at-path pt '(0 one)) nil))
    (should (equal (ptree-get-node-at-path pt '(0 zero "one")) nil))
    (should (equal (ptree-get-node-at-path pt '(0 zero "zero" "one")) nil))
    (should (equal (ptree-get-node-at-path pt 0)
                   '(0 nil (zero nil ("zero" nil nil)))))
    (should (equal (ptree-get-node-at-path pt '(0 zero))
                   '(zero nil ("zero" nil nil))))
    (should (equal (ptree-get-node-at-path pt 'zero)
                   '(zero nil ("zero" nil (0 nil nil)))))
    (should (equal (ptree-get-node-at-path pt '(zero "zero"))
                   '("zero" nil (0 nil nil))))
    (should (equal (ptree-get-node-at-path pt "zero")
                   '("zero" nil (0 nil (zero nil nil)))))
    (should (equal (ptree-get-node-at-path pt '("zero" 0))
                   '(0 nil (zero nil nil))))))

(ert-deftest ptree-test-get-child-node-at-index ()
  (should (equal (ptree-get-child-node-at-index '(nil nil nil) 0) nil))
  (should (equal (ptree-get-child-node-at-index '(nil nil nil) 1) nil))
  (should (equal (ptree-get-child-node-at-index '("test" nil nil) 0) nil))
  (should (equal (ptree-get-child-node-at-index '("test" nil nil) 1) nil))
  (should (equal (ptree-get-child-node-at-index '("test" 42) 0) nil))
  (should (equal (ptree-get-child-node-at-index '("test" 42) 1) nil))
  (let ((pt '(nil nil (0 nil nil) (1 "a") (3 nil nil) (4 42))))
    (should (equal (ptree-get-child-node-at-index pt 0)
                   '(0 nil nil)))
    (should (equal (ptree-get-child-node-at-index pt 1)
                   '(1 "a")))
    (should (equal (ptree-get-child-node-at-index pt 2)
                   '(3 nil nil)))
    (should (equal (ptree-get-child-node-at-index pt 3)
                   '(4 42)))
    (should (equal (ptree-get-child-node-at-index pt 4) nil)))
  (let ((pt '("test" nil (0 nil nil) (1 "a") (3 nil nil) (4 42))))
    (should (equal (ptree-get-child-node-at-index pt 0)
                   '(0 nil nil)))
    (should (equal (ptree-get-child-node-at-index pt 1)
                   '(1 "a")))
    (should (equal (ptree-get-child-node-at-index pt 2)
                   '(3 nil nil)))
    (should (equal (ptree-get-child-node-at-index pt 3)
                   '(4 42)))
    (should (equal (ptree-get-child-node-at-index pt 4) nil))))

(ert-deftest ptree-test-get-value-at-path ()
  (let ((pt '(nil nil (0 42) (zero nil ("zero" 9))
                  ("one" nil)
                  ("zero" nil (0 nil (zero 3))))))
    (should (eq (ptree-get-value-at-path pt 1) 'not-found))
    (should (eq (ptree-get-value-at-path pt '(zero 0)) 'not-found))
    (should (eq (ptree-get-value-at-path pt '("zero" 0 one)) 'not-found))
    (should (eq (ptree-get-value-at-path pt '("zero" 0 zero one)) 'not-found))
    (should (eq (ptree-get-value-at-path pt 0) 42))
    (should (eq (ptree-get-value-at-path pt '(zero "zero")) 9))
    (should (eq (ptree-get-value-at-path pt '("zero" 0 zero)) 3))
    (should (eq (ptree-get-value-at-path pt "one") nil))))

(ert-deftest ptree-test-delete-node-at-path ()
  (let ((pt (list nil nil (list 0 42)
                  (list 'zero nil (list "zero" 9))
                  (list "one" nil)
                  (list "zero" nil (list 0 nil (list 'zero 3))))))
    (should-error (ptree-delete-node-at-path pt -1))
    (should-error (ptree-delete-node-at-path pt "zzz"))
    (should-error (ptree-delete-node-at-path pt '("zero" 0 zero one)))
    (should (equal (ptree-delete-node-at-path pt '("zero" 0 zero))
                   '(zero 3)))
    (should (equal pt '(nil nil (0 42) (zero nil ("zero" 9))
                            ("one" nil)
                            ("zero" nil (0 nil nil)))))
    (should (equal (ptree-delete-node-at-path pt "zero")
                   '("zero" nil (0 nil nil))))
    (should (equal pt '(nil nil (0 42) (zero nil ("zero" 9))
                            ("one" nil))))
    (should (equal (ptree-delete-node-at-path pt 0)
                   '(0 42)))
    (should (equal pt '(nil nil (zero nil ("zero" 9)) ("one" nil))))
    (should (equal (ptree-delete-node-at-path pt "one")
                   '("one" nil)))
    (should (equal pt '(nil nil (zero nil ("zero" 9)))))
    (should (equal (ptree-delete-node-at-path pt '(zero "zero"))
                   '("zero" 9)))
    (should (equal pt '(nil nil (zero nil nil))))
    (should (equal (ptree-delete-node-at-path pt 'zero)
                   '(zero nil nil)))
    (should (equal pt '(nil nil nil)))))

(ert-deftest ptree-test-delete-child-nodes ()
  (let ((pt (list nil nil (list 0 42)
                  (list 'zero nil (list "zero" 9))
                  (list "one" nil)
                  (list "zero" nil (list 0 nil (list 'zero 3))))))
    (should-error (ptree-delete-child-nodes pt 'one))
    (should-error (ptree-delete-child-nodes pt 1))
    (should-error (ptree-delete-child-nodes pt "two"))
    (ptree-delete-child-nodes pt)
    (should (equal pt '(nil nil (0 42) (zero nil ("zero" 9))
                            ("one" nil)
                            ("zero" nil (0 nil (zero 3))))))
    (ptree-delete-child-nodes pt "zero")
    (should (equal pt '(nil nil (0 42) (zero nil ("zero" 9))
                            ("one" nil))))
    (ptree-delete-child-nodes pt "one")
    (should (equal pt '(nil nil (0 42) (zero nil ("zero" 9)))))
    (ptree-delete-child-nodes pt 0 'zero)
    (should (equal pt '(nil nil nil)))))

(defun ptree-run-tests ()
  (interactive)
  (ert-run-tests-interactively "ptree-test-"))
